./ ADD NAME=FILECOMM 0100-02291-02291-0122-00093-00093-00000-RLRICE
         MACRO
         FILECOMM
         DC    CL16'*** FILECOMM ***'
COMSAVE  DC    9D'0'                   REGISTER SAVE AREA
COMMAXL  DC    F'10000'                MAXIMUM LINES TO PRINT
COMSKIP  DC    H'0'                    NUMBER OF RECORDS TO SKIP
COMCOUNT DC    H'0'                    NUMBER OF RECORDS TO PRINT
COMSCAN1 DC    CL80' '                 SCAN 1 ARGUEMENT
COMSCN1L DC    H'0'                    SCAN 1 ARGUEMENT LENGTH
COMZ1BGN DC    H'0'                    SCAN START OFFSET
COMZ1END DC    H'0'                    SCAN END OFFSET
COMSCAN2 DC    CL80' '                 SCAN 2 ARGUEMENT
COMSCN2L DC    H'0'                    SCAN 2 ARGUEMENT LENGTH
COMZ2BGN DC    H'0'                    SCAN START OFFSET
COMZ2END DC    H'0'                    SCAN END OFFSET
COMTRGR  DC    CL80' '                 TRIGGER VALUE
COMTRGL  DC    H'0'                    TRIGGER VALUE LENGTH
COMTZBGN DC    H'0'                    SCAN START OFFSET
COMTZEND DC    H'0'                    SCAN END OFFSET
COMTITLE DC    CL80' '                 PAGE TITLE
COMSPACE DC    C'D'                    SPACING
$DOUBLE  EQU   C'D'                    .. DOUBLE SPACING
$SINGLE  EQU   C'S'                    .. SINGLE SPACING
COMHEX   DC    C'H'                    HEX CONTROL
$HEX     EQU   C'H'                    .. PRINT VERTICAL HEX
COMSCTRL DC    C' '                    SCAN 1/SCAN 2 RELATIONSHIP
$AND     EQU   C'A'                    .. USING 'AND' LOGIC
$OR      EQU   C'O'                    .. USING 'OR' LOGIC
COMCOPY  DC    C' '                    COPY FLAG
$COPY    EQU   C'C'                    .. COPY REQUESTED
COMHELP  DC    C' '                    COPY FLAG
$HELP    EQU   C'H'                    .. HELP REQUESTED
COMFLAG  DC    X'00'                   FLAGS/INDICATORS
$ERROR   EQU   X'80'                   .. FATAL ERROR ENCOUNTERED
$SKIP    EQU   X'40'                   .. USING SKIP
$COUNT   EQU   X'20'                   .. USING COUNT
$SCTRL   EQU   X'10'                   .. USING SCAN CONTROL
$100     EQU   X'08'                   .. FIRST 100 FORMAT
COMSCN1F DC    X'00'                   SCAN 1 PARAMETERS
$SCAN1   EQU   X'80'                   .. USING SCAN 1
$Z1BGN   EQU   X'40'                   .. USING ZONE BEGIN
$Z1END   EQU   X'20'                   .. USING ZONE END
COMSCN1T DC    256X'00'                'XLOC' TRANSLATE TABLE
COMSCN1P XLOC  WORK=COMSCN1T,          'XLOC' PARAMETER LIST           +
               STRING=COMSCAN1,        .. SEARCH ARGUEMENT             +
               MF=L
COMSCN2F DC    X'00'                   SCAN 2 PARAMETERS
$SCAN2   EQU   X'80'                   .. USING SCAN 2
$Z2BGN   EQU   X'40'                   .. USING ZONE BEGIN
$Z2END   EQU   X'20'                   .. USING ZONE END
COMSCN2T DC    256X'00'                'XLOC' TRANSLATE TABLE
COMSCN2P XLOC  WORK=COMSCN2T,          'XLOC' PARAMETER LIST           +
               STRING=COMSCAN2,        .. SEARCH ARGUEMENT             +
               MF=L
COMTRGRF DC    X'00'                   TRIGGER PARAMETERS
$TRIGGER EQU   X'80'                   .. USING TRIGGER
$TZBGN   EQU   X'40'                   .. USING ZONE BEGIN
$TZEND   EQU   X'20'                   .. USING ZONE END
COMTRGRT DC    256X'00'                'XLOC' TRANSLATE TABLE
COMTRGRP XLOC  WORK=COMTRGRT,          'XLOC' PARAMETER LIST           +
               STRING=COMTRGR,         .. SEARCH ARGUEMENT             +
               MF=L
COMPAGE  DC    PL3'0'                  PAGE NUMBER
COMLINE  DC    PL2'0'                  LINE NUMBER
*---------------------------------------------------------------------*
*                                                                     *
*                     DCB'S                                           *
*                                                                     *
*---------------------------------------------------------------------*
SYSUT1   DCB   DSORG=PS,                                               +
               EODAD=*,                                                +
               MACRF=GL,                                               +
               DDNAME=SYSUT1,                                          +
               EXLST=UT1EXLST
JFCBREQ  RDJFCB (SYSUT1),MF=L
UT1EXLST DC    AL1(X'87'),AL3(JFCBAREA)
JFCBAREA DS    0F
         IEFJFCBN
SYSUT2   DCB   DSORG=PS,                                               +
               MACRF=PM,                                               +
               DDNAME=SYSUT2
SYSIN    DCB   DSORG=PS,                                               +
               MACRF=GM,                                               +
               LRECL=80,                                               +
               RECFM=F,                                                +
               DDNAME=SYSIN,                                           +
               EODAD=*
PRINTER  DCB   DSORG=PS,                                               +
               MACRF=PM,                                               +
               LRECL=121,                                              +
               RECFM=FBA,                                              +
               DDNAME=SYSPRINT
         MEND
./ ADD NAME=VSAMCOMM 0100-02291-02291-0122-00106-00106-00000-RLRICE
         MACRO
         VSAMCOMM
         DC    CL16'*** VSAMCOMM ***'
COMSAVE  DC    9D'0'                   REGISTER SAVE AREA
COMMAXL  DC    F'10000'                MAXIMUM LINES TO PRINT
COMLRECL DC    F'0'                    VSAM FILE LRECL
COMKEYL  DC    F'0'                    VSAM FILE KEY LENGTH
COMRKP   DC    F'0'                    VSAM FILE RELATIVE KEY POSITION
COMSKIP  DC    H'0'                    NUMBER OF RECORDS TO SKIP
COMCOUNT DC    H'0'                    NUMBER OF RECORDS TO PRINT
COMSCAN1 DC    CL80' '                 SCAN 1 ARGUEMENT
COMSCN1L DC    H'0'                    SCAN 1 ARGUEMENT LENGTH
COMZ1BGN DC    H'0'                    SCAN START OFFSET
COMZ1END DC    H'0'                    SCAN END OFFSET
COMSCAN2 DC    CL80' '                 SCAN 2 ARGUEMENT
COMSCN2L DC    H'0'                    SCAN 2 ARGUEMENT LENGTH
COMZ2BGN DC    H'0'                    SCAN START OFFSET
COMZ2END DC    H'0'                    SCAN END OFFSET
COMTRGR  DC    CL80' '                 TRIGGER VALUE
COMTRGL  DC    H'0'                    TRIGGER VALUE LENGTH
COMTZBGN DC    H'0'                    SCAN START OFFSET
COMTZEND DC    H'0'                    SCAN END OFFSET
COMTITLE DC    CL80' '                 PAGE TITLE
COMSPACE DC    C'D'                    SPACING
$DOUBLE  EQU   C'D'                    .. DOUBLE SPACING
$SINGLE  EQU   C'S'                    .. SINGLE SPACING
COMHEX   DC    C'H'                    HEX CONTROL
$HEX     EQU   C'H'                    .. PRINT VERTICAL HEX
COMSCTRL DC    C' '                    SCAN 1/SCAN 2 RELATIONSHIP
$AND     EQU   C'A'                    .. USING 'AND' LOGIC
$OR      EQU   C'O'                    .. USING 'OR' LOGIC
COMHELP  DC    C' '                    COPY FLAG
$HELP    EQU   C'H'                    .. HELP REQUESTED
COMFLAG  DC    X'00'                   FLAGS/INDICATORS
$ERROR   EQU   X'80'                   .. FATAL ERROR ENCOUNTERED
$SKIP    EQU   X'40'                   .. USING SKIP
$COUNT   EQU   X'20'                   .. USING COUNT
$SCTRL   EQU   X'10'                   .. USING SCAN CONTROL
$100     EQU   X'08'                   .. FIRST100 FORMAT
$FROMKEY EQU   X'04'                   .. USING FROM KEY
$TOKEY   EQU   X'02'                   .. USING TO KEY
COMACBF  DC    X'00'                   VSAM FILE INDICATORS
$KSDS    EQU   X'80'                   .. DATASET IS A KSDS
$RRDS    EQU   X'40'                   .. DATASET IS AN RRDS
$ESDS    EQU   X'20'                   .. DATASET IS AN ESDS
COMSCN1F DC    X'00'                   SCAN 1 PARAMETERS
$SCAN1   EQU   X'80'                   .. USING SCAN 1
$Z1BGN   EQU   X'40'                   .. USING ZONE BEGIN
$Z1END   EQU   X'20'                   .. USING ZONE END
COMSCN1T DC    256X'00'                'XLOC' TRANSLATE TABLE
COMSCN1P XLOC  WORK=COMSCN1T,          'XLOC' PARAMETER LIST           +
               STRING=COMSCAN1,        .. SEARCH ARGUEMENT             +
               MF=L
COMSCN2F DC    X'00'                   SCAN 2 PARAMETERS
$SCAN2   EQU   X'80'                   .. USING SCAN 2
$Z2BGN   EQU   X'40'                   .. USING ZONE BEGIN
$Z2END   EQU   X'20'                   .. USING ZONE END
COMSCN2T DC    256X'00'                'XLOC' TRANSLATE TABLE
COMSCN2P XLOC  WORK=COMSCN2T,          'XLOC' PARAMETER LIST           +
               STRING=COMSCAN2,        .. SEARCH ARGUEMENT             +
               MF=L
COMTRGRF DC    X'00'                   TRIGGER PARAMETERS
$TRIGGER EQU   X'80'                   .. USING TRIGGER
$TZBGN   EQU   X'40'                   .. USING ZONE BEGIN
$TZEND   EQU   X'20'                   .. USING ZONE END
COMTRGRT DC    256X'00'                'XLOC' TRANSLATE TABLE
COMTRGRP XLOC  WORK=COMTRGRT,          'XLOC' PARAMETER LIST           +
               STRING=COMTRGR,         .. SEARCH ARGUEMENT             +
               MF=L
COMPAGE  DC    PL3'0'                  PAGE NUMBER
COMLINE  DC    PL2'0'                  LINE NUMBER
COMFKEYL DC    X'00'                   FROM KEY LENGTH
COMFKEY  DC    CL80' '                 FROM KEY
COMTKEYL DC    X'00'                   TO KEY LENGTH
COMTKEY  DC    CL80' '                 TO KEY
               EJECT
*---------------------------------------------------------------------*
*                                                                     *
*             ACB/EXIT LIST/JFCB DATA                                 *
*                                                                     *
*---------------------------------------------------------------------*
VSAMFILE ACB   AM=VSAM,                                                +
               DDNAME=VSAMFILE,                                        +
               EXLST=VSAMXLST
JFCBREQ  RDJFCB (VSAMFILE),MF=L
VSAMXLST DC    AL1(X'87'),AL3(JFCBAREA)
JFCBAREA DS    0F
         IEFJFCBN
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                      DCB'S                                          *
*                                                                     *
*---------------------------------------------------------------------*
SYSIN    DCB   DSORG=PS,                                               +
               MACRF=GM,                                               +
               LRECL=80,                                               +
               RECFM=F,                                                +
               DDNAME=SYSIN,                                           +
               EODAD=*
PRINTER  DCB   DSORG=PS,                                               +
               MACRF=PM,                                               +
               LRECL=121,                                              +
               RECFM=FBA,                                              +
               DDNAME=SYSPRINT
         MEND
./ ADD NAME=XLOC     0100-02291-02291-0122-00358-00358-00000-RLRICE
.* ------------------------------------------------------------------ *
.*                                                                    *
.*                      MACRO PARAMETERS                              *
.*                                                                    *
.*  TYPE -------- EITHER 'CALL', 'INIT', 'DSECT', OR 'TABLE'          *
.*  ERROR ------- ADDRESS OF NOT FOUND ROUTINE                        *
.*  STRING ------ ADDRESS OF SUBSTRING TO BE LOCATED                  *
.*  STRLEN ------ LENGTH OF SUBSTRING TO BE LOCATED                   *
.*  WORK -------- ADDRESS OF A 256 BYTE WORK AREA                     *
.*  RECORD ------ ADDRESS OF SOURCE RECORD TO BE SCANNED              *
.*  TABLE ------- ADDRESS OF A FREQUENCY LOOK-UP TABLE                *
.*  MF ---------- EITHER 'I', 'L', OR '(E,ADDR)'                      *
.*                                                                    *
.* ------------------------------------------------------------------ *
         MACRO
&NAME    XLOC &TYPE=SCAN,              'SCAN', 'INIT', 'TABLE', 'DSECT'+
               &STRING=,               ADDRESS OF STRING               +
               &STRLEN=,               LENGTH OF STRING                +
               &RECORD=,               ADDR OF SOURCE RECORD           +
               &RECLEN=,               LENGTH OF RECORD                +
               &WORK=,                 256 BYTE WORK AREA ADDRESS      +
               &ERROR=,                BRANCH HERE IF UNSUCCESSFUL     +
               &TABLE=,                ADDR OF FREQUENCY TABLE         +
               &MF=I                   MACRO FORMAT
            AIF   (T'&TYPE EQ 'O').ERR0010
            AIF   (T'&MF EQ 'O').ERR0020
            AIF   ('&TYPE' EQ 'DSECT').DSECT
            AIF   ('&TYPE' EQ 'TABLE').TABLE
            AIF   ('&TYPE' EQ 'SCAN').LBL0010
            AIF   ('&TYPE' EQ 'INIT').LBL0010
            MNOTE 8,'INVALID ''TYPE'' PARAMETER'
            MEXIT
.* ------------------------------------------------------------------ *
.*   CHECK THE MACRO FORMAT AND EXPAND ACCORDINGLY                    *
.* ------------------------------------------------------------------ *
.LBL0010    ANOP
            AIF   ('&MF' EQ 'L').LIST
            AIF   ('&MF(1)' EQ 'E').EXEC
            AIF   ('&MF' NE 'I').ERR0020
.* ------------------------------------------------------------------ *
.*   INLINE   EXPANSION                                               *
.* ------------------------------------------------------------------ *
            AIF   (T'&RECORD EQ 'O').ERR0030
            AIF   (T'&STRING EQ 'O').ERR0040
            AIF   (T'&STRLEN EQ 'O').ERR0050
            AIF   (T'&WORK EQ 'O').ERR0060
            AIF   (T'&TABLE EQ 'O').ERR0070
            AIF   ('&STRING'(1,1) NE '(').I001
            ST    &STRING(1),STRA&SYSNDX  STRING ADDRESS
.I001       ANOP
            AIF   ('&STRLEN'(1,1) NE '(').I002
            ST    &STRLEN(1),STRL&SYSNDX  STRING LENGTH
.I002       ANOP
            AIF   ('&RECORD'(1,1) NE '(').I003
            ST    &RECORD(1),RECA&SYSNDX  WORK AREA
.I003       ANOP
            AIF   ('&RECORD'(1,1) NE '(').I004
            ST    &RECORD(1),RECA&SYSNDX  RECORD ADDRESS
.I004       ANOP
            AIF   ('&RECLEN'(1,1) NE '(').I005
            ST    &RECLEN(1),RECL&SYSNDX  TABLE ADDRESS
.I005       ANOP
            AIF   ('&WORK'(1,1) NE '(').I006
            ST    &WORK(1),WORK&SYSNDX    WORK AREA ADDRESS
.I006       ANOP
            AIF   ('&TABLE'(1,1) NE '(').I007
            ST    &TABLE(1),TBLE&SYSNDX
.I007       ANOP
            BAL   1,PLST&SYSNDX           SET PARM LIST ADDRESS
            AIF   ('&TYPE' EQ 'INIT').I008
CMD&SYSNDX  DC    C'S'                    SCAN COMMAND
            AGO   .I009
.I008       ANOP
CMD&SYSNDX  DC    C'N'                    NEW STRING
.I009       ANOP
STAT&SYSNDX DC    C' '                    STATUS
FOCC&SYSNDX DC    C' '                    LEAST OBSERVED CHARACTER
            DC    C' '
            AIF   ('&STRING'(1,1) EQ '(').I010
STRA&SYSNDX DC    A(&STRING.)             STRING ADDRESS
            AGO   .I011
.I010       ANOP
STRA&SYSNDX DC    A(0)                    STRING ADDRESS
.I011       ANOP
            AIF   ('&STRLEN'(1,1) EQ '(').I012
STRL&SYSNDX DC    A(&STRLEN.)             STRING LENGTH
            AGO   .I013
.I012       ANOP
STRL&SYSNDX DC    A(0)                    STRING LENGTH
.I013       ANOP
            AIF   ('&RECORD'(1,1) EQ '(').I014
RECA&SYSNDX DC    A(&RECORD.)             RECORD ADDRESS
            AGO   .I015
.I014       ANOP
RECA&SYSNDX DC    A(0)                    RECORD ADDRESS
.I015       ANOP
            AIF   ('&RECLEN'(1,1) EQ '(').I016
RECL&SYSNDX DC    A(&RECLEN.)             TABLE LENGTH
            AGO   .I017
.I016       ANOP
RECL&SYSNDX DC    A(0)                    TABLE ADDRESS
.I017       ANOP
            AIF   ('&WORK'(1,1) EQ '(').I018
WORK&SYSNDX DC    A(&WORK.)               WORK AREA ADDRESS
            AGO   .I019
.I018       ANOP
WORK&SYSNDX DC    A(0)                    WORK AREA ADDRESS
.I019       ANOP
            AIF   ('&TABLE'(1,1) EQ '(').I020
TBLE&SYSNDX DC    A(&TABLE.)              FOC TABLE ADDRESS
            AGO   .I021
.I020       ANOP
TBLE&SYSNDX DC    A(0)                    FOC TABLE ADDRESS
.I021       ANOP
FOCD&SYSNDX DC    A(0)                    LEAST SEEN CHARACTER DSPL
EPA&SYSNDX  DC    V(XLOC)                 XLOC MODULE ENTRY POINT
PLST&SYSNDX DS    0H
            L     R15,EPA&SYSNDX          LOAD ENTRY POINT ADDRESS
            BALR  R14,R15                 CALL XLOC
            AIF   (T'&ERROR EQ 'O').EXIT
            CLI   STAT&SYSNDX,C' '        SUCCESSFUL??
            AIF   ('&ERROR'(1,1) EQ '(').I022
            BNE   &ERROR                  NO
            AGO   .EXIT
.I022       ANOP
            BNER  &ERROR(1)               NO
            AGO   .EXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*  EXECUTE   EXPANSION                                               *
.*                                                                    *
.* ------------------------------------------------------------------ *
.EXEC    ANOP
         AIF   ('&MF(2)'(1,1) EQ '(').E000
         LA    R1,&MF(2)                    PARM LIST
         AGO   .E001
.E000    ANOP
         LR    R1,&MF(2)                    PARM LIST
.E001    ANOP
         PUSH  USING
         USING XLOCLIST,R1                  DEFINE PARMLIST BASE
         AIF   (T'&STRING EQ 'O').E002
         AIF   ('&STRING'(1,1) NE '(').E002
         ST    &STRING(1),XLOCSTRA          SEARCH STRING ADDRESS
.E002    ANOP
         AIF   (T'&STRLEN EQ 'O').E003
         AIF   ('&STRLEN'(1,1) NE '(').E003
         ST    &STRLEN(1),XLOCSTRL          SEARCH STRING LENGTH
.E003    ANOP
         AIF   (T'&RECORD EQ 'O').E004
         AIF   ('&RECORD'(1,1) NE '(').E004
         ST    &RECORD(1),XLOCRECA          RECORD ADDRESS
.E004    ANOP
         AIF   (T'&RECLEN EQ 'O').E005
         AIF   ('&RECLEN'(1,1) NE '(').E005
         ST    &RECLEN(1),XLOCRECL          RECORD LENGTH
.E005    ANOP
         AIF   (T'&WORK EQ 'O').E006
         AIF   ('&WORK'(1,1) NE '(').E006
         ST    &WORK(1),XLOCWORK            WORK AREA
.E006    ANOP
         AIF   (T'&TABLE EQ 'O').E007
         AIF   ('&TABLE'(1,1) NE '(').E007
         ST    &TABLE(1),XLOCTBLE           FOC TABLE ADDRESS
.E007    ANOP
         AIF   (T'&STRING EQ 'O').E008
         AIF   ('&STRING'(1,1) EQ '(').E008
         LA    R0,&STRING                   STRING ADDRESS
         ST    R0,XLOCSTRA                  SET STRING ADDRESS
.E008    ANOP
         AIF   (T'&STRLEN EQ 'O').E009
         AIF   ('&STRLEN'(1,1) EQ '(').E009
         LA    R0,&STRLEN                   STRING LENGTH
         ST    R0,XLOCSTRL                  SET STRING LENGTH
.E009    ANOP
         AIF   (T'&RECORD EQ 'O').E010
         AIF   ('&RECORD'(1,1) EQ '(').E010
         LA    R0,&RECORD                   RECORD ADDRESS
         ST    R0,XLOCRECA                  SET RECORD ADDRESS
.E010    ANOP
         AIF   (T'&RECLEN EQ 'O').E011
         AIF   ('&RECLEN'(1,1) EQ '(').E011
         LA    R0,&RECLEN                   RECORD LENGTH
         ST    R0,XLOCRECL                  SAVE RECORD LENGTH
.E011    ANOP
         AIF   (T'&WORK EQ 'O').E012
         AIF   ('&WORK'(1,1) EQ '(').E012
         LA    R0,&WORK                     WORK AREA ADDRESS
         ST    R0,XLOCWORK                  SET WORK AREA ADDRESS
.E012    ANOP
         AIF   (T'&TABLE EQ 'O').E013
         AIF   ('&TABLE'(1,1) EQ '(').E013
         LA    R0,&TABLE                    TABLE ADDRESS
         ST    R0,XLOCTBLE                  SET TABLE ADDRESS
.E013    ANOP
         AIF   ('&TYPE' EQ 'INIT').E014
         MVI   XLOCCMD,$XLOCS               SET COMMAND
         AGO   .E015
.E014    ANOP
         MVI   XLOCCMD,$XLOCNEW             SET COMMAND
.E015    ANOP
         L     R15,XLOCEPA                  XLOC MODULE ENTRY POINT
         BALR  R14,R15                      CALL XLOC
         AIF   (T'&ERROR EQ 'O').E017
         CLI   XLOCSTAT,$XLOCOK             SUCCESSFUL??
         AIF   ('&ERROR'(1,1) EQ '(').E016
         BNE   &ERROR                       NO
         POP   USING
         AGO   .EXIT
.E016    ANOP
         BNER  &ERROR(1)                    NO
.E017    ANOP
         POP   USING
         AGO   .EXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*   LIST   EXPANSION                                                 *
.*                                                                    *
.* ------------------------------------------------------------------ *
.LIST    ANOP
         AIF   (T'&NAME EQ 'O').ERR0080
&NAME    DS    0F
         AIF   ('&TYPE' EQ 'INIT').L001
         DC    C'S'                         SCAN COMMAND
         AGO   .L002
.L001    ANOP
         DC    C'N'                         NEW STRING COMMAND
.L002    ANOP
         DC    C' '                         STATUS BYTE
         DC    C' '                         LEAST FREQUENT CHARACTER
         DC    C' '
         AIF   (T'&STRING EQ 'O').L003
         AIF   ('&STRING'(1,1) EQ '(').L003
         DC    A(&STRING.)                  STRING ADDRESS
         AGO   .L004
.L003    ANOP
         DC    A(0)                         STRING ADDRESS
.L004    ANOP
         AIF   (T'&STRLEN EQ 'O').L005
         AIF   ('&STRLEN'(1,1) EQ '(').L005
         DC    A(&STRLEN)                   STRING LENGTH
         AGO   .L006
.L005    ANOP
         DC    A(0)                         STRING LENGTH
.L006    ANOP
         AIF   (T'&RECORD EQ 'O').L007
         AIF   ('&RECORD'(1,1) EQ '(').L007
         DC    A(&RECORD.)                  RECORD ADDRESS
         AGO   .L008
.L007    ANOP
         DC    A(0)                         RECORD ADDRESS
.L008    ANOP
         AIF   (T'&RECLEN EQ 'O').L009
         AIF   ('&RECLEN'(1,1) EQ '(').L009
         DC    A(&RECLEN.)                  RECORD LENGTH
         AGO   .L010
.L009    ANOP
         DC    A(0)                         RECORD LENGTH
.L010    ANOP
         AIF   (T'&WORK EQ 'O').L011
         AIF   ('&WORK'(1,1) EQ '(').L011
         DC    A(&WORK.)                    WORK AREA ADDRESS
         AGO   .L012
.L011    ANOP
         DC    A(0)                         WORK AREA ADDRESS
.L012    ANOP
         AIF   (T'&TABLE EQ 'O').L013
         AIF   ('&TABLE'(1,1) EQ '(').L013
         DC    A(&TABLE.)                   TABLE ADDRESS
         AGO   .L014
.L013    ANOP
         DC    A(0)                         TABLE ADDRESS
.L014    ANOP
         DC    A(0)                         LEAST SEEN CHARACTER DSPL
         DC    V(XLOC)                      XLOC MODULE ENTRY POINT
         AGO   .EXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*                  DSECT EXPANSION                                   *
.*                                                                    *
.* ------------------------------------------------------------------ *
.DSECT   ANOP
XLOCLIST DSECT
XLOCCMD  DS    C             COMMAND
$XLOCS   EQU   C'S'          .. SCAN
$XLOCNEW EQU   C'N'          .. NEW STRING
XLOCSTAT DS    C             STATUS
$XLOCOK  EQU   C' '          .. SUCCESSFUL
$XLOCNF  EQU   C'N'          .. SEARCH ARG NOT FOUND
$XLOCER1 EQU   C'1'          .. SEARCH ARG LENGTH < 1
$XLOCER2 EQU   C'2'          .. SEARCH ARG LENGTH > 256
XLOCFOCC DS    C             LEAST FREQUENTLY EXPECTED CHARACTER
         DS    C
XLOCSTRA DS    A             SEARCH STRING ADDRESS
XLOCSTRL DS    A             SEARCH STRING LENGTH
XLOCRECA DS    A             CURRENT RECORD ADDRESS
XLOCRECL DS    A             CURRENT RECORD LENGTH
XLOCWORK DS    A             WORK AREA
XLOCTBLE DS    A             FOC TABLE ADDRESS
XLOCFOCD DS    A             DISPLACEMENT TO LEAST SEEN CHARACTER
XLOCEPA  DS    A             ADDRESS OF XLOC MODULE
         AGO   .EXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*  GENERATE A DEFAULT FREQUENCY TABLE                                *
.*                                                                    *
.* ------------------------------------------------------------------ *
.TABLE   ANOP
         AIF   (T'&NAME EQ 'O').ERR0080
&NAME    DS    0F
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'09040404040404040404040404040404'   X'00' - X'0F'
         DC    X'04040404040404040404040404040404'   X'10' - X'1F'
         DC    X'04040404040404040404040404040404'   X'20' - X'2F'
         DC    X'04040404040404040404040404040404'   X'30' - X'3F'
         DC    X'09040404040404040404040404040404'   X'40' - X'4F'
         DC    X'04040404040404040404040404040404'   X'50' - X'5F'
         DC    X'04040404040404040404040404040404'   X'60' - X'6F'
         DC    X'04040404040404040404040404040404'   X'70' - X'7F'
         DC    X'04090909090908080908040404040404'   X'80' - X'8F'
         DC    X'04070709080909060409040404040404'   X'90' - X'9F'
         DC    X'04040909050403020100040404040404'   X'A0' - X'AF'
         DC    X'04040404040404040404040404040404'   X'B0' - X'BF'
         DC    X'04090909090908080908040404040404'   X'C0' - X'CF'
         DC    X'04070709080909060409040404040404'   X'D0' - X'DF'
         DC    X'04040909050403020100040404040404'   X'E0' - X'EF'
         DC    X'09090909090909090909040404040409'   X'F0' - X'FF'
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
*
*             VALUES
*  -------------------------------------------------------------------
*  ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 X'00' X'FF' X'40'  ALL OTHERS
*  99999889877989964999543210 9999999999    9     9     9       4
*
         AGO   .EXIT
.* ------------------------------------------------------------------ *
.*                                                                    *
.*  ERROR MESSAGES                                                    *
.*                                                                    *
.* ------------------------------------------------------------------ *
.ERR0010 MNOTE 8,'TYPE NOT SPECIFIED OR INVALID'
         MEXIT
.ERR0020 MNOTE 8,'NO MF OPERAND SPECIFIED OR INVALID'
         MEXIT
.ERR0030 MNOTE 8,'NO RECORD ADDRESS SPECIFIED'
         MEXIT
.ERR0040 MNOTE 8,'NO SEARCH STRING SPECIFIED'
         MEXIT
.ERR0050 MNOTE 8,'NO SUBSTRING LENGTH SPECIFIED'
         MEXIT
.ERR0060 MNOTE 8,'NO WORK AREA PROVIDED'
         MEXIT
.ERR0070 MNOTE 8,'NO FREQUENCY TABLE PROVIDED'
         MEXIT
.ERR0080 MNOTE 8,'NAME MUST BE SPECIFIED FOR MF=L OR TYPE=TABLE'
         MEXIT
.EXIT    ANOP
         MEND
./ ADD NAME=XSORT    0100-02291-02291-0122-00283-00283-00000-RLRICE
         MACRO
&NAME    XSORT &TYPE=CALL,             * TYPE OF CALL, DSECT OR CALL   +
               &LRECL=,                * LOGICAL RECORD LENGTH         +
               &OFFSET=,               * OFFSET INTO RECORD TO KEY     +
               &KEYLEN=,               * LENGTH OF KEY                 +
               &COUNT=,                * NUMBER OF ENTRIES             +
               &DATA=,                 * ADDRESS OF DATA STRUCTURE     +
               &ERROR=,                * ERROR ADDRESS                 +
               &MF=I                   * MACRO FORMAT I,L, OR E
.**********************************************************************
.*                                                                    *
.*     XSORT |TYPE=DSECT| |,LRECL=###| |,OFFSET=###| |,ERROR=XXXX|    *
.*           |TYPE=CALL | | LRECL=(#)| | OFFSET=(#)|                  *
.*                                                                    *
.*           |,KEYLEN=###| |,COUNT=###| |,DATA=###| |,MF=(E,XXX)|     *
.*           | KEYLEN=(#)| | COUNT=(#)| | DATA=(#)| | MF=(E,(#))|     *
.*                                                  | MF=L      |     *
.*                                                  | MF=I      |     *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.*    TYPE=DSECT|CALL ------ TYPE OF MACRO INVOKATION                 *
.*                                                                    *
.*    ERROR=XXXX ----------- LABEL OF STATEMENT TO RECEIVE CONTROL    *
.*                           IF AN ERROR OCCURS                       *
.*                                                                    *
.*    LRECL=#|(#) ---------- LOGICAL RECORD LENGTH, EITHER AN ABSOLUTE*
.*                           VALUE OR THE LOW HALFWORD OF A REGISTER. *
.*                                                                    *
.*    OFFSET=#|(#) --------- OFFSET INTO LRECL FOR KEY, EITHER AN     *
.*                           ABS VALUE OR LOW HALFWORD OF A REGISTER. *
.*                                                                    *
.*    KEYLEN=#|(#) --------- LENGTH OF KEY, EITHER AN ABS VALUE OR A  *
.*                           LOW HALFWORD OF A REGISTER.              *
.*                                                                    *
.*    COUNT=#|(#) ---------- NUMBER OF RECORDS IN THE LIST TO SORT,   *
.*                           EITHER AN ABS VALUE OR LOW HALFWORD      *
.*                           OF A REGISTER                            *
.*                                                                    *
.*    DATA=X|(#) ----------- ADDRESS OF LIST TO SORT, EITHER A LABEL  *
.*                           OR A REGISTER.                           *
.*                                                                    *
.*    MF=(E,XXXX) ---------- EXECUTE FORM OF THE MACRO. THIS MACRO    *
.*    MF=(E(#))              USES A LIST PRE-BUILT BY THE LIST FORM   *
.*                           TO MAINTAIN RE-ENTRANCY. MAY EITHER      *
.*                           REFERENCE A LABEL OR A REGISTER MAY      *
.*                           CONTAIN THE ADDRESS OF THE LIST.         *
.*                                                                    *
.*    MF=L ----------------- GENERATES A LIST. THIS FORM DOES NOT     *
.*                           GENERATE EXECUTABLE CODE. IT IS USED     *
.*                           IN CONJUNCTION WITH THE EXECUTE FORM     *
.*                           TO CONSTRUCT A LIST (PARAMETER LIST).    *
.*                                                                    *
.*    MF=I ----------------- INLINE FORM. GENERATES THE PARAMETER     *
.*                           LIST INLINE WITH EXECUTABLE CODE. THIS   *
.*                           IS THE DEFAULT FORM.                     *
.*                                                                    *
.**********************************************************************
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         AIF   ('&TYPE' NE 'CALL').BADCALL
         AIF   ('&MF(1)' EQ 'E').EXEC
         AIF   ('&MF' EQ 'L').LIST
         AIF   (T'&LRECL EQ 'O').NLRECL
         AIF   (T'&OFFSET EQ 'O').NOFFSET
         AIF   (T'&KEYLEN EQ 'O').NKEYLEN
         AIF   (T'&COUNT EQ 'O').NCOUNT
         AIF   (T'&DATA EQ 'O').NDATA
.**********************************************************************
.*                                                                    *
.*                      INLINE EXPANSION                              *
.*                                                                    *
.**********************************************************************
         AIF   (T'&NAME EQ 'O').NONAME
&NAME    DS    0H
.NONAME  ANOP
         AIF   ('&LRECL'(1,1) NE '(').I001
         STH   &LRECL(1),P001&SYSNDX
.I001    ANOP
         AIF   ('&OFFSET'(1,1) NE '(').I002
         STH   &OFFSET(1),P002&SYSNDX
.I002    ANOP
         AIF   ('&KEYLEN'(1,1) NE '(').I003
         STH   &KEYLEN(1),P003&SYSNDX
.I003    ANOP
         AIF   ('&COUNT'(1,1) NE '(').I004
         STH   &COUNT(1),P004&SYSNDX
.I004    ANOP
         AIF   ('&DATA'(1,1) NE '(').I005
         STCM  &DATA(1),15,P005&SYSNDX
.I005    ANOP
         BAL   1,EXS&SYSNDX          JUMP AROUND PARM LIST
         AIF   ('&LRECL'(1,1) NE '(').I007
P001&SYSNDX DC   AL2(0)              LRECL
         AGO   .I007A
.I007    ANOP
P001&SYSNDX DC   AL2(&LRECL)         LRECL
.I007A   ANOP
         AIF   ('&OFFSET'(1,1) NE '(').I008
P002&SYSNDX DC   AL2(0)              OFFSET
         AGO   .I008A
.I008    ANOP
P002&SYSNDX DC   AL2(&OFFSET)        OFFSET
.I008A   ANOP
         AIF   ('&KEYLEN'(1,1) NE '(').I009
P003&SYSNDX DC   AL2(0)              KEY LENGTH
         AGO   .I009A
.I009    ANOP
P003&SYSNDX DC   AL2(&KEYLEN)        KEY LENGTH
.I009A   ANOP
         AIF   ('&COUNT'(1,1) NE '(').I010
P004&SYSNDX DC   AL2(0)              COUNT
         AGO   .I010A
.I010    ANOP
P004&SYSNDX DC   AL2(&COUNT)         COUNT
.I010A   ANOP
         AIF   ('&DATA'(1,1) NE '(').I011
P005&SYSNDX DC   AL4(0)              DATA ADDRESS
         AGO   .I011A
.I011    ANOP
P005&SYSNDX DC   AL4(&DATA)          DATA ADDRESS
.I011A   ANOP
EPA&SYSNDX DC   VL4(XSORT)           ENTRY POINT ADDRESS OF SORT RTN
EXS&SYSNDX DS   0H
         ICM  15,15,EPA&SYSNDX       LOAD ENTRY POINT ADDRESS
         BALR 14,15                  CALL SORT ROUTINE
         AIF  (T'&ERROR EQ 'O').I013
         LTR  15,15                  CHECK IF ERROR
         BNZ  &ERROR                 NOT ZERO, ABORT
.I013    ANOP
         AGO  .ENDMAC
.**********************************************************************
.*                                                                    *
.*                 LIST FORM EXPANSION                                *
.*                                                                    *
.**********************************************************************
.LIST    ANOP
         AIF  (T'&NAME EQ 'O').NONAME1
&NAME    DS    0F                    FORCE ALIGNMENT
.NONAME1 ANOP
         AIF  (T'&LRECL EQ 'O').L001
L001&SYSNDX DC   AL2(&LRECL)         LOGICAL RECORD LENGTH
         AGO  .L001A
.L001    ANOP
L001&SYSNDX DC   AL2(0)              LOGICAL RECORD LENGTH
.L001A   ANOP
         AIF  (T'&OFFSET EQ 'O').L002
L002&SYSNDX DC   AL2(&OFFSET)        OFFSET
         AGO  .L002A
.L002    ANOP
L002&SYSNDX DC   AL2(0)              OFFSET
.L002A   ANOP
         AIF  (T'&KEYLEN EQ 'O').L003
L003&SYSNDX DC   AL2(&KEYLEN)        KEY LENGTH
         AGO  .L003A
.L003    ANOP
L003&SYSNDX DC   AL2(0)              KEY LENGTH
.L003A   ANOP
         AIF  (T'&COUNT EQ 'O').L004
L004&SYSNDX DC   AL2(&COUNT)         COUNT OF RECORDS
         AGO  .L004A
.L004    ANOP
L004&SYSNDX DC   AL2(0)              COUNT OF RECORDS
.L004A   ANOP
         AIF  (T'&DATA EQ 'O').L005
L005&SYSNDX DC   AL4(&DATA)          ADDRESS OF DATA
         AGO  .L005A
.L005    ANOP
L005&SYSNDX DC   AL4(0)              ADDRESS OF DATA
.L005A   ANOP
         DC    VL4(XSORT)             ENTRY POINT ADDRESS
         AGO  .ENDMAC
.**********************************************************************
.*                                                                    *
.*                   EXECUTE FORM EXPANSION                           *
.*                                                                    *
.**********************************************************************
.EXEC    ANOP
         AIF  (T'&NAME EQ 'O').E001
&NAME    DS   0H
.E001    ANOP
         LA   1,&MF(2)               LOAD ADDRESS OF PARM LIST
         AIF  (T'&LRECL EQ 'O').E002
         AIF  ('&LRECL'(1,1) EQ '(').E002A
         LA   0,&LRECL               LOAD LRECL
         STH  0,0(,1)                STORE LRECL
         AGO  .E002
.E002A   ANOP
         STH  &LRECL(1),0(,1)        STORE LRECL
.E002    ANOP
         AIF  (T'&OFFSET EQ 'O').E003
         AIF  ('&OFFSET'(1,1) EQ '(').E003A
         LA   0,&OFFSET              LOAD OFFSET
         STH  0,2(,1)                STORE OFFSET
         AGO  .E003
.E003A   ANOP
         STH  &OFFSET(1),2(,1)       STORE OFFSET
.E003    ANOP
         AIF  (T'&KEYLEN EQ 'O').E004
         AIF  ('&KEYLEN'(1,1) EQ '(').E004A
         LA   0,&KEYLEN              LOAD KEYLEN
         STH  0,4(,1)                STORE KEYLEN
         AGO  .E004
.E004A   ANOP
         STH  &KEYLEN(1),4(,1)       STORE KEYLEN
.E004    ANOP
         AIF  (T'&COUNT EQ 'O').E005
         AIF  ('&COUNT'(1,1) EQ '(').E005A
         LA   0,&COUNT               LOAD COUNT
         STH  0,6(,1)                STORE COUNT
         AGO  .E005
.E005A   ANOP
         STH  &COUNT(1),6(,1)        STORE COUNT
.E005    ANOP
         AIF  (T'&DATA EQ 'O').E006
         AIF  ('&DATA'(1,1) EQ '(').E006A
         LA   0,&DATA                LOAD DATA ADDRESS
         STCM 0,15,8(1)              STORE DATA ADDRESS
         AGO  .E006
.E006A   ANOP
         STCM &DATA(1),15,8(1)       STORE DATA ADDRESS
.E006    ANOP
         L    15,12(,1)              LOAD ENTRY POINT ADDRESS
         BALR 14,15                  CALL SORT ROUTINE
         AIF  (T'&ERROR EQ 'O').E008
         LTR  15,15                  WAS THERE AN ERROR ???
         BNZ  &ERROR                 YES, BRANCH
.E008    ANOP
         AGO  .ENDMAC
.**********************************************************************
.*                                                                    *
.*                 TYPE=DSECT EXPANSION                               *
.*                                                                    *
.**********************************************************************
.DSECT   ANOP
         DSECT
         AIF   (T'&NAME EQ 'O').D001
&NAME    DS    0F
.D001    ANOP
***********************************************************************
*                                                                     *
*      * * * * * * *  SORT PARAMETER LIST FORMAT  * * * * * * *       *
*                                                                     *
*     0 (00) - +----------+----------+                                *
*              |  PLRECL  |  POFFSET |                                *
*     4 (04) - +----------+----------+                                *
*              | PKEYLEN  |  PCOUNT  |                                *
*     8 (08) - +----------+----------+                                *
*              |       PDATA         |                                *
*    12 (0C) - +---------------------+                                *
*                                                                     *
***********************************************************************
         SPACE 2
PLRECL   DS    H                     LOGICAL RECORD LENGTH
POFFSET  DS    H                     OFFSET INTO RECORD FOR KEY
PKEYLEN  DS    H                     LENGTH OF KEY
PCOUNT   DS    H                     NUMBER OF ENTRIES IN LIST
PDATA    DS    A                     ADDRESS OF LIST TO SORT
         AGO   .ENDMAC
.**********************************************************************
.*                                                                    *
.*                  ERROR MESSAGES                                    *
.*                                                                    *
.**********************************************************************
.BADCALL ANOP
         MNOTE 12,'&TYPE IS INVALID CALL TYPE.'
         MEXIT
.NLRECL  ANOP
         MNOTE 8,'LRECL OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'
         MEXIT
.NOFFSET ANOP
         MNOTE 8,'OFFSET OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'
         MEXIT
.NKEYLEN ANOP
         MNOTE 8,'KEYLEN OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'
         MEXIT
.NCOUNT  ANOP
         MNOTE 8,'COUNT OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'
         MEXIT
.NDATA   ANOP
         MNOTE 8,'DATA OMITTED FOR MF=I OR MF=L MACRO INVOKATION.'
         MEXIT
.ENDMAC  ANOP
         MEND
