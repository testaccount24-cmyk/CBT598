./ ADD NAME=AIXUTIL  0100-02291-02291-0122-00023-00023-00000-RLRICE
This utility was used to speed up building alternate indexes
on VSAM clusters.  I don't remember too many of the details
about this.  I know you define a cluster, define the index,
and define a "PATH".  It seems like you also had to run a
IDCAMS command to actually build the index.  This program
was intended to replace the IDCAMS command to build the index.
If my memory serves correctly, it was much faster than IDCAMS.
I would imagine by now IBM has changed IDCAMS to be as fast
or faster than this.

The best I can make out from the source, this is the only
module, so all you should have to do is assemble and link-edit
it.  To run it, it looks like it needs DD statements for

   AIXPRT      printed messages
   BASE        the base cluster
   AIX         the alternate index cluster
   SORTIN      work area.  One record per base cluster record
               is written to this file with the base and secondary
               keys.

I don't remember for sure, but I have to believe you would also
need DD statements for SORT (SORTWKx, SYSOUT ?)
./ ADD NAME=DOC      0100-02291-02291-0122-00018-00018-00000-RLRICE
Sam,

This is about all that I found that was worth anything.
I didn't find any of the JCL I had used to assemble or
execute any of this stuff.

I started out on DOS/VS in 1977.  This was DOS/VS
Release 34 and before DOS/VS became DOS/VSE.

I started working with MVS in 1982 when it was MVS/SP 3.8.
This was before XA, ESA, OS/390, and whatever it is called
now (Z/os?).  All this stuff was 24-bit.... whoever thought
that we would need more than a 16-Meg address space?

I wrote most of this as learning exercises when I first
started working with MVS. I'm sure that this stuff has
plenty of bugs.  None of it requires any APF authorization
so it shouldn't cause too much damage if it blows up.
./ ADD NAME=FILEUTIL 0100-02291-02291-0122-00021-00021-00000-RLRICE
Source files FILECOMM, FILEPH00, FILEPH01, FILEPH02, and FILEPH03
are all components of a utility I called FILEUTIL.

All five source files need to be assembled and then link-edited
together to make one load module.  The entry point should be
FILEPH00.  The assembly SYSLIB will need to reference the maclib
that has FILECOMM and XLOC.

This program allows you to print records from sequential files.
The program has a HELP function that prints off a list of control
statements and their parameters.

I could not find the JCL used to assemble or execute FILEUTIL.

It looks like the JCL needs DDs for:

   SYSIN       control statements
   SYSUT1      sequential file to be read/scanned
   SYSUT2      If "COPY" is requested, the selected records
               will be copied to this file
   PRINTER     sysout
./ ADD NAME=PDSUTIL  0100-02291-02291-0122-00012-00012-00000-RLRICE
Source files PDSCOMM, PDSPH00, PDSPH01, PDSPH02, and PDSPH03
make up a utility I called PDSUTIL.

You need to assemble all five source files and link-edit them
into one load module.  The entry point should be PDSPH00.
The assembler SYSLIB needs to reference the maclib with PDSCOMM
and XLOC.

The utility searches through PDSes one member at a time for
members with specified strings.  There is a "HELP" command
that will print out a list of the control statements and their
parameters.
./ ADD NAME=VSAMUTIL 0100-02291-02291-0122-00019-00019-00000-RLRICE
Source files VSAMCOMM, VSAMPH00, VSAMPH01, VSAMPH02, and VSAMPH03
are all components of a utility I called VSAMUTIL.

All five source files need to be assembled and then link-edited
together to make one load module.  The entry point should be
VSAMPH00.  The assembly SYSLIB will need to reference the maclib
that has VSAMCOMM and XLOC.

This program allows you to print records from VSAM files.
The program has a HELP function that prints off a list of control
statements and their parameters.

I could not find the JCL used to assemble or execute VSAMUTIL.

It looks like the JCL needs DDs for:

   SYSIN       control statements
   PRINTER     sysout
   VSAMFILE    the VSAM file
./ ADD NAME=XLOC     0100-02291-02291-0122-00028-00028-00000-RLRICE
XLOC searches for strings.

What makes this program different is that you can optimize
the search based on what is called a "frequency of occurance"
table.  For example if you are searching source files, the
letters q, x, and z occur less frequently than vowels like
a or e.  If you are searching object code, values like x'30'
would probably occur less often than x'00' or x'40'.

To use XLOC, you need to make a call to "initialize".  On
the "initialize" call, the string you are searching for is
translated  using the frequency of occurance table.  Then
the value that is least likely to occur is saved plus the
displacement into the string where that value was located.
For example if you were searching for the literal string
"unique", the value least likely to occur is probably the
letter "q" which is in the fifth byte of the string.  XLOC
would contruct a 256 translate table with all bytes zero
except the byte corresponding to the letter "q" or x'71'.
Then on subsequent calls, XLOC uses a TRT instruction to
locate any q's in the string being searched.  If the TRT
finds a "q", XLOC will "back up" four bytes (because the
q is in the fifth postion of the string we are looking for)
and check for the entire string ("unique").

The XLOC macro will generate a table that is pretty well
optimized for searching for text strings.  You can code
your own tables if you wish.
./ ADD NAME=XSORT    0100-02291-02291-0122-00006-00006-00000-RLRICE
XSORT is an in-core table sorter.
The XSORT macro can be used to generate the parameter list.
The XSORT module has to be link-edited with the program.

I have seen several other sorts.  This is the fastest one
I ever found.
